

from hdwallet import HDWallet as HDW
from hdwallet.symbols import BTCTEST


from bitcoinutils.setup import setup
from bitcoinutils.hdwallet import HDWallet
from bitcoinutils.utils import to_satoshis
from bitcoinutils.transactions import Transaction, TxInput, TxOutput, Sequence
from bitcoinutils.keys import P2pkhAddress, P2shAddress
from bitcoinutils.script import Script
from bitcoinutils.constants import TYPE_RELATIVE_TIMELOCK


#[CHANGE with your data]
'''
- To create a new contranct send some fund to the "Owner(inPath) address" 
and put the TxIn details of that here  
- To have "Owner(inPath) address" run this code.
- Till not puting the new Txin details the Transaction is not valid.
- Dont forget to check the change outPut as for test porpus it uses owner address but it has to use the lock address.
''' 
TxIn_id= "10f152f16cf6c2680c145dbf6d2dd6677197f5c70097d7fa0969ed750378fe07"
TxIn_index= 1 
fund=  0.00004775


fee= 400/100000000
owner_timeLock = 2505655 #meaning sequence as n spend_after_n_block
guest_timelock = 2505655 #meaning sequence as n spend_after_n_block

#[DEFINE THE INDEX] to start a contract default = 0
DerivativePath="m/24/"
Path_Index= 0
'''
DerivativePath="m/10/"
Derivative path is used to drive keys and has to be the same in the smartlcok as it uses that to derive keys.

Index= 0
Derivative path need index to be compelete.
in the first contract you should define then index which is 0 by default.
but from the second contract it is generated by lock show the index in the last item opreturn script
'''


#[CHANGE by your data]Owner MASTER Private Key to sign the transaction
ownerXprv="tprv8ZgxMBicQKsPdJoBnWQ4NXgfYY3a344cVpfxGVVAMex4Ka5UZfdcEVC8E43cpxpj9WfzWJLy8yRQWzD5StoRm6JLqjLNCbfyKsDEmqX3Lhh"


#[CHANGE by your data]Guest Address
guestXpub = "tpubD6NzVbkrYhZ4YbGzfZ2uchThpawBzS7FgaUs3k5AZyapwWB9EkvFV6CyVNT2JWCqACyhWDiHfdityAZajDoQmh9uEPakg1LPV5TXvbpaZFs"

#[CHANGE by your data]Lock address 
lockXpub = "tpubD6NzVbkrYhZ4YDpCdJW8s3ihthS5xpojJLVr5Mx82teeeo8oAcs62YLqPYzzGtXQYA7CTNgsV58mxD9R2zkHePtKVTj1cMaBXR1UbHXAdXt"



def main():
    setup('testnet')
    # HINT in a TX we use these derivativr path(In_PATH --> (Out_PATH, Out_PATH), (Out_PATH)
    # Owner --> (Guest,  Owner) (Lock)
    # Owner --> (Guest,  Owner) (Owner)
    inPath  = DerivativePath + str(Path_Index)
    outPath = DerivativePath + str(Path_Index+1)
    ownerPath= DerivativePath + '0'

    # 1 Lock - Out_PATH
    lockHDW = HDW(symbol=BTCTEST)
    lockHDW.from_xpublic_key(lockXpub)
    lockHDW.from_path(outPath)
    lockAddrBase58 = lockHDW.p2pkh_address()
    lockaddr = P2pkhAddress(lockAddrBase58)
    # 2 Owner -
    ownerPrv = HDWallet(ownerXprv,ownerPath).get_private_key()
    ownerAddr = ownerPrv.get_public_key().get_address()
   
    # 3 Guest - Out_PATH
    guestHDW = HDW(symbol=BTCTEST)
    guestHDW.from_xpublic_key(guestXpub)
    guestHDW.from_path(outPath)
    guestAddrBase58 = guestHDW.p2pkh_address()
    guestAddr = P2pkhAddress(guestAddrBase58)

         
    p2shRedeem=[
                guest_timelock , 'OP_CHECKLOCKTIMEVERIFY', 'OP_DROP', 'OP_DUP', 'OP_HASH160', guestAddr.to_hash160(), 'OP_EQUAL'      , 
                'OP_NOTIF'           , 
                owner_timeLock , 'OP_CHECKLOCKTIMEVERIFY', 'OP_DROP', 'OP_DUP', 'OP_HASH160', ownerAddr.to_hash160(), 'OP_EQUALVERIFY', 
                'OP_ENDIF' , 'OP_CHECKSIG'
                ]
    
    # check Script
    if  p2shRedeem[0] > p2shRedeem[8] :
        print('Guest lock timeshould be lower or equal than Owner Lock time !!!')
        print('Guest lock time =', p2shRedeem[0], ', Owner lock time =', p2shRedeem[8])
        while 1 :
            pass 
   
    
    # 2.1- Create a TxOut with P2SH
    redeemScript=Script(p2shRedeem)

    
    print('Path in                 :', inPath)
    print('Path out                :', outPath)
    print('Owner address(D-path/0) :', ownerAddr.to_string() )
    print('Guest address(outPath)  :', guestAddr.to_string())
    print('Lock address(outPath)   :', lockaddr.to_string())
  

    print('Redeem script in HEX       :', redeemScript.to_hex())
    # scriptAddress =  P2shAddress.from_script(redeemScript)
    # print('P2SH script address in HEX :', scriptAddress.to_string() )
    P2SH_txout = TxOutput(  to_satoshis(fee), redeemScript.to_p2sh_script_pub_key() )
    

    
    # 2.3- Create a TxOut with P2PKH (change output)
    changeAddr = P2pkhAddress(lockAddrBase58)
    P2PKH_txout = TxOutput( to_satoshis(fund - fee - fee) , changeAddr.to_script_pub_key() )
    # P2PKH_txout = TxOutput( to_satoshis(fund - fee - fee) , ownerAddr.to_script_pub_key() )################return fund to owner to test##############################

    # 3- Create a TxIn
    txin = TxInput(TxIn_id , TxIn_index)
 
    # 4- Form a Transaction
    tx = Transaction([txin], [ P2SH_txout, P2PKH_txout])
 
    fundTX_addr = P2pkhAddress(ownerAddr.to_string())
    sig = ownerPrv.sign_input(
        tx,
        0,
        Script(["OP_DUP", "OP_HASH160", fundTX_addr.to_hash160(), "OP_EQUALVERIFY", "OP_CHECKSIG", ] ),
    )

    pubKey = ownerPrv.get_public_key().to_hex()
    txin.script_sig = Script([sig, pubKey])
    signed_tx = tx.serialize()

    print("\nRaw signed transaction:\n" + signed_tx)
    print("\nTransaction ID:\n" + tx.get_txid())


if __name__ == "__main__":
    main()

